#! /bin/bash

# This is the GNU style for indent 2.2.9 (according to man page)
#
#"$INDENT" \
#    -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2 \
#    -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -nprs -psl -saf -sai \
#    -saw -nsc -nsob
#    "$@"

# This is our modification
#
# blank line after procedure body
# braces indent 0 (or do you want -bl2 here and -bl below?)
# braces to right of control statements (or do you want -bl here?)
# no tabs
# put the return type of a function on a separate line
# swallow optional blank lines
INDENT_BASE_OPTIONS="-bap -bli0 -br -nut -psl -sob -di20"

# Indent has problems with user defined data types
# and some other data types (i.e. size_t).
# We can tell indent manually which datatypes we defined and use.
# If you encounter an indenting problem with a (user defined)
# type, add it with a -T prefix to this list.
#
# Example without -T t8_cmesh_t:
#   static	t8_cmesh_t
#   afunction (int aparameter) {
#
# Note the undesired whitespaces between 'static' and 't8_cmesh_t'.
#
# Example with -T t8_cmesh_t:
#   static t8_cmesh_t
#   afunction (int aparameter) {
T8CODE_ADDITIONAL_DATATYPES="-T t8_cmesh_t -T t8_forest_t -T size_t \
	                     -T t8_locidx_t -T t8_gloidx_t -T t8_element_t"

INDENT_OPTIONS="$INDENT_BASE_OPTIONS $T8CODE_ADDITIONAL_DATATYPES"

INDENT=`which gnuindent 2> /dev/null`
if test -z "$INDENT" ; then
	INDENT=`which gindent`
fi
if test -z "$INDENT" ; then
	INDENT=`which indent`
fi

for arg in "$@" ; do
  if [ "x$arg" == "x-o" ]; then
    WANTSOUT=1
  fi
done
if [ -z "$WANTSOUT" ]; then
  for NAME in "$@" ; do
    $INDENT $INDENT_OPTIONS "$NAME"
  done
else
  $INDENT $INDENT_OPTIONS $@
fi
